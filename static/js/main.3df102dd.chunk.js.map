{"version":3,"sources":["Tasks/Counter.tsx","Tasks/Employees.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","useState","count","setCount","className","onClick","Employees","columns","React","useMemo","Header","accessor","data","setEmployess","a","fetch","method","response","json","res","newEmployees","unshift","console","log","useTable","initialState","pageIndex","pageSize","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","useEffect","then","r","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","disabled","length","addUser","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3df102dd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Counter = () => {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <div className=\"counter_container\">\r\n            <button onClick = { () => setCount(0) }>Reset</button>\r\n            <p>{count}</p> \r\n            <button onClick={ () => setCount(count + 1) }>Plus</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Counter ;","import React, { useEffect, useState } from 'react'\r\nimport Employe from './../models/employe'\r\nimport { useTable, usePagination } from 'react-table'\r\n\r\nimport {\r\n    UseColumnOrderInstanceProps,\r\n    UseExpandedInstanceProps,\r\n    UseFiltersInstanceProps,\r\n    UseGlobalFiltersInstanceProps,\r\n    UseGroupByInstanceProps,\r\n    UsePaginationInstanceProps,\r\n    UseRowSelectInstanceProps,\r\n    UseRowStateInstanceProps,\r\n    UseSortByInstanceProps,\r\n} from 'react-table'\r\ndeclare module 'react-table' {\r\n\r\n    export interface TableInstance<D>\r\n        extends UseColumnOrderInstanceProps<D>,\r\n        UseExpandedInstanceProps<D>,\r\n        UseFiltersInstanceProps<D>,\r\n        UseGlobalFiltersInstanceProps<D>,\r\n        UseGroupByInstanceProps<D>,\r\n        UsePaginationInstanceProps<D>,\r\n        UseRowSelectInstanceProps<D>,\r\n        UseRowStateInstanceProps<D>,\r\n        UseSortByInstanceProps<D> { }\r\n\r\n    export interface TableState<D>\r\n        extends UseColumnOrderState<D>,\r\n        UseExpandedState<D>,\r\n        UseFiltersState<D>,\r\n        UseGlobalFiltersState<D>,\r\n        UseGroupByState<D>,\r\n        UsePaginationState<D>,\r\n        UseResizeColumnsState<D>,\r\n        UseRowSelectState<D>,\r\n        UseRowStateState<D>,\r\n        UseSortByState<D> { }\r\n}\r\nconst Employees = () => {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: ' ',\r\n                columns: [\r\n                    {\r\n                        Header: 'Name',\r\n                        accessor: 'name',\r\n                    },\r\n                    {\r\n                        Header: 'Email',\r\n                        accessor: 'email',\r\n                    },\r\n                    {\r\n                        Header: 'Position',\r\n                        accessor: 'position',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        []\r\n    )\r\n    const [data, setEmployess] = useState<Employe[]>([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [position, setPosition] = useState(\"\");\r\n    const [newUser, setNewUser] = useState([]);\r\n    async function addUser() {\r\n        try {\r\n            const response = await fetch('https://60a63e14b970910017eb1174.mockapi.io/api/v1/employees', {\r\n                method: 'POST',\r\n            });\r\n            const res = await response.json();\r\n            let newEmployees = [...data];\r\n            newEmployees.unshift(res)\r\n            setEmployess(newEmployees)\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            initialState: { pageIndex: 0, pageSize: 5 },\r\n        },\r\n        usePagination\r\n    )\r\n    useEffect(() => {\r\n        fetch('https://60a63e14b970910017eb1174.mockapi.io/api/v1/employees?page=1&limit=100').then(res => res.json().then(r => setEmployess(r)))\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {console.log(page)}\r\n                    {page.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"pagination\">\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                    {'<<'}\r\n                </button>{' '}\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                    {'<'}\r\n                </button>{' '}\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                    {'>'}\r\n                </button>{' '}\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                    {'>>'}\r\n                </button>{' '}\r\n                <span>\r\n                    Page{' '}\r\n                    <strong>\r\n                        {pageIndex + 1} of {pageOptions.length}\r\n                    </strong>{' '}\r\n                </span>\r\n                <span>\r\n                    <button onClick={() => addUser()}>Add new user</button>\r\n                </span>{' '}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employees;","import './App.css';\nimport Counter from './Tasks/Counter';\nimport Employees from './Tasks/Employees';\n\nfunction App() {\n  return (\n    <div>\n      <Counter />\n      <Employees />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}